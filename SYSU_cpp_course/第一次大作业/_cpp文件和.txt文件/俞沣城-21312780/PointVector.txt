21312780-俞沣城-PointVector.txt


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& 测试PointVector类 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



# 测试pvec.empty()

empty point vector!

# 测试push_back(),size(),capacity()

size=1 capacity=4
size=2 capacity=4
size=3 capacity=4
size=4 capacity=4
size=5 capacity=8
size=6 capacity=8
size=7 capacity=8
size=8 capacity=8
size=9 capacity=16
size=10 capacity=16
size=11 capacity=16
size=12 capacity=16
size=13 capacity=16
size=14 capacity=16
size=15 capacity=16
size=16 capacity=16
size=17 capacity=32
size=18 capacity=32
size=19 capacity=32
size=20 capacity=32


# 测试front() back() print()

(0,0)(19,19)


# 测试拷贝构造和<<重载
#  代码：	PointVector pvec1(pvec);
		cout << pvec1 << endl;

(0,0)(19,19)(0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (9,9) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19)


# 测试赋值重载，at(),[]重载
# 代码：	PointVector pvec2;
		pvec2 = pvec1;
		for (size_t j = 0; j < pvec2.size(); j++) {
			cout << pvec2.at(j)._x << " " << pvec2[j]._y << endl;
		}

0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15
16 16
17 17
18 18
19 19

# 测试insert()
# 头插一个(100,100)
# 测试erase 删除中间元素

(100,100) (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (9,9) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19)

(100,100) (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19)


# 测试operator+()
# 拼接两个PointVector对象

(0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (9,9) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19) (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (9,9) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19)


# 测试迭代器遍历PointVector

(100,100) (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (6,6) (7,7) (8,8) (10,10) (11,11) (12,12) (13,13) (14,14) (15,15) (16,16) (17,17) (18,18) (19,19)







